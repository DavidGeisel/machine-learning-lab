# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from lab_api.swagger_client.api_client import ApiClient


class AdministrationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def check_workspace(self, **kwargs):  # noqa: E501
        """Checks whether a workspace container for the passed id already exists. If not, a new one is created & started.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_workspace(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str authorization: Authorization Token
        :return: StatusMessageFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_workspace_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.check_workspace_with_http_info(**kwargs)  # noqa: E501
            return data

    def check_workspace_with_http_info(self, **kwargs):  # noqa: E501
        """Checks whether a workspace container for the passed id already exists. If not, a new one is created & started.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_workspace_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str authorization: Authorization Token
        :return: StatusMessageFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_workspace" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/admin/workspace/check', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusMessageFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_events(self, **kwargs):  # noqa: E501
        """Returns events filtered by a specified event type (admin-only).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event: Event Type. If not provided, all events will be returned.
        :param str authorization: Authorization Token
        :return: ListOfLabEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_events_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_events_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_events_with_http_info(self, **kwargs):  # noqa: E501
        """Returns events filtered by a specified event type (admin-only).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event: Event Type. If not provided, all events will be returned.
        :param str authorization: Authorization Token
        :return: ListOfLabEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/admin/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOfLabEventsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lab_info(self, **kwargs):  # noqa: E501
        """Returns information about this Lab instance.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lab_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization Token
        :return: LabInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lab_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_lab_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_lab_info_with_http_info(self, **kwargs):  # noqa: E501
        """Returns information about this Lab instance.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lab_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization Token
        :return: LabInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lab_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/admin/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statistics(self, **kwargs):  # noqa: E501
        """Returns statistics about this Lab instance (admin-only).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statistics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization Token
        :return: LabStatisticsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statistics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_statistics_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_statistics_with_http_info(self, **kwargs):  # noqa: E501
        """Returns statistics about this Lab instance (admin-only).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statistics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization Token
        :return: LabStatisticsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statistics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/admin/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabStatisticsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_all_workspaces(self, **kwargs):  # noqa: E501
        """Resets all workspaces. Use with caution (admin-only).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_all_workspaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization Token
        :return: StatusMessageFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_all_workspaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reset_all_workspaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def reset_all_workspaces_with_http_info(self, **kwargs):  # noqa: E501
        """Resets all workspaces. Use with caution (admin-only).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_all_workspaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization Token
        :return: StatusMessageFormat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_all_workspaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/admin/workspace/reset-all', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusMessageFormat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_workspace(self, **kwargs):  # noqa: E501
        """Resets a workspace. Removes the container (keeps all persisted data) and starts a new one.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_workspace(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str authorization: Authorization Token
        :return: LabServiceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_workspace_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reset_workspace_with_http_info(**kwargs)  # noqa: E501
            return data

    def reset_workspace_with_http_info(self, **kwargs):  # noqa: E501
        """Resets a workspace. Removes the container (keeps all persisted data) and starts a new one.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_workspace_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :param str authorization: Authorization Token
        :return: LabServiceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_workspace" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/admin/workspace/reset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabServiceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shutdown_disk_exceeding_containers(self, dryrun, **kwargs):  # noqa: E501
        """Remove all workspaces that exceed the disk storage limit (docker-local mode only).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_disk_exceeding_containers(dryrun, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool dryrun: If 'true', it will only return candidates for removal. (required)
        :param str authorization: Authorization Token
        :return: ListOfStringsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shutdown_disk_exceeding_containers_with_http_info(dryrun, **kwargs)  # noqa: E501
        else:
            (data) = self.shutdown_disk_exceeding_containers_with_http_info(dryrun, **kwargs)  # noqa: E501
            return data

    def shutdown_disk_exceeding_containers_with_http_info(self, dryrun, **kwargs):  # noqa: E501
        """Remove all workspaces that exceed the disk storage limit (docker-local mode only).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_disk_exceeding_containers_with_http_info(dryrun, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool dryrun: If 'true', it will only return candidates for removal. (required)
        :param str authorization: Authorization Token
        :return: ListOfStringsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dryrun', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shutdown_disk_exceeding_containers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dryrun' is set
        if ('dryrun' not in params or
                params['dryrun'] is None):
            raise ValueError("Missing the required parameter `dryrun` when calling `shutdown_disk_exceeding_containers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dryrun' in params:
            query_params.append(('dryrun', params['dryrun']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/admin/workspace/shutdown-disk-exceeding', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOfStringsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shutdown_unused_workspaces(self, dryrun, **kwargs):  # noqa: E501
        """Shutdown all unused workspaces - 15 days without activity (admin-only).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_unused_workspaces(dryrun, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool dryrun: If 'true', it will only return candidates for shutdown. (required)
        :param int threshold: Number of inactive days to consider workspace unused.
        :param list[str] body: IDs to include as inactive users.
        :param str authorization: Authorization Token
        :return: ListOfLabUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shutdown_unused_workspaces_with_http_info(dryrun, **kwargs)  # noqa: E501
        else:
            (data) = self.shutdown_unused_workspaces_with_http_info(dryrun, **kwargs)  # noqa: E501
            return data

    def shutdown_unused_workspaces_with_http_info(self, dryrun, **kwargs):  # noqa: E501
        """Shutdown all unused workspaces - 15 days without activity (admin-only).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_unused_workspaces_with_http_info(dryrun, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool dryrun: If 'true', it will only return candidates for shutdown. (required)
        :param int threshold: Number of inactive days to consider workspace unused.
        :param list[str] body: IDs to include as inactive users.
        :param str authorization: Authorization Token
        :return: ListOfLabUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dryrun', 'threshold', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shutdown_unused_workspaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dryrun' is set
        if ('dryrun' not in params or
                params['dryrun'] is None):
            raise ValueError("Missing the required parameter `dryrun` when calling `shutdown_unused_workspaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dryrun' in params:
            query_params.append(('dryrun', params['dryrun']))  # noqa: E501
        if 'threshold' in params:
            query_params.append(('threshold', params['threshold']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/admin/workspace/shutdown-unused', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOfLabUsers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
