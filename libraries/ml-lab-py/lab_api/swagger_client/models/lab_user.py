# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LabUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'permissions': 'list[str]',
        'attributes': 'dict(str, object)',
        'last_activity': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'permissions': 'permissions',
        'attributes': 'attributes',
        'last_activity': 'lastActivity'
    }

    def __init__(self, id=None, name=None, permissions=None, attributes=None, last_activity=None):  # noqa: E501
        """LabUser - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._permissions = None
        self._attributes = None
        self._last_activity = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if permissions is not None:
            self.permissions = permissions
        if attributes is not None:
            self.attributes = attributes
        if last_activity is not None:
            self.last_activity = last_activity

    @property
    def id(self):
        """Gets the id of this LabUser.  # noqa: E501


        :return: The id of this LabUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LabUser.


        :param id: The id of this LabUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LabUser.  # noqa: E501


        :return: The name of this LabUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LabUser.


        :param name: The name of this LabUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this LabUser.  # noqa: E501


        :return: The permissions of this LabUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this LabUser.


        :param permissions: The permissions of this LabUser.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def attributes(self):
        """Gets the attributes of this LabUser.  # noqa: E501


        :return: The attributes of this LabUser.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this LabUser.


        :param attributes: The attributes of this LabUser.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    @property
    def last_activity(self):
        """Gets the last_activity of this LabUser.  # noqa: E501


        :return: The last_activity of this LabUser.  # noqa: E501
        :rtype: int
        """
        return self._last_activity

    @last_activity.setter
    def last_activity(self, last_activity):
        """Sets the last_activity of this LabUser.


        :param last_activity: The last_activity of this LabUser.  # noqa: E501
        :type: int
        """

        self._last_activity = last_activity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LabUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
