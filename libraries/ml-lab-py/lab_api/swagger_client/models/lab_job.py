# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LabJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'docker_id': 'str',
        'docker_name': 'str',
        'docker_image': 'str',
        'admin_link': 'str',
        'started_at': 'int',
        'status': 'str',
        'feature_type': 'str',
        'configuration': 'dict(str, str)',
        'labels': 'dict(str, str)',
        'finished_at': 'int',
        'exit_code': 'int'
    }

    attribute_map = {
        'name': 'name',
        'docker_id': 'dockerId',
        'docker_name': 'dockerName',
        'docker_image': 'dockerImage',
        'admin_link': 'adminLink',
        'started_at': 'startedAt',
        'status': 'status',
        'feature_type': 'featureType',
        'configuration': 'configuration',
        'labels': 'labels',
        'finished_at': 'finishedAt',
        'exit_code': 'exitCode'
    }

    def __init__(self, name=None, docker_id=None, docker_name=None, docker_image=None, admin_link=None, started_at=None, status=None, feature_type=None, configuration=None, labels=None, finished_at=None, exit_code=None):  # noqa: E501
        """LabJob - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._docker_id = None
        self._docker_name = None
        self._docker_image = None
        self._admin_link = None
        self._started_at = None
        self._status = None
        self._feature_type = None
        self._configuration = None
        self._labels = None
        self._finished_at = None
        self._exit_code = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if docker_id is not None:
            self.docker_id = docker_id
        if docker_name is not None:
            self.docker_name = docker_name
        if docker_image is not None:
            self.docker_image = docker_image
        if admin_link is not None:
            self.admin_link = admin_link
        if started_at is not None:
            self.started_at = started_at
        if status is not None:
            self.status = status
        if feature_type is not None:
            self.feature_type = feature_type
        if configuration is not None:
            self.configuration = configuration
        if labels is not None:
            self.labels = labels
        if finished_at is not None:
            self.finished_at = finished_at
        if exit_code is not None:
            self.exit_code = exit_code

    @property
    def name(self):
        """Gets the name of this LabJob.  # noqa: E501


        :return: The name of this LabJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LabJob.


        :param name: The name of this LabJob.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def docker_id(self):
        """Gets the docker_id of this LabJob.  # noqa: E501


        :return: The docker_id of this LabJob.  # noqa: E501
        :rtype: str
        """
        return self._docker_id

    @docker_id.setter
    def docker_id(self, docker_id):
        """Sets the docker_id of this LabJob.


        :param docker_id: The docker_id of this LabJob.  # noqa: E501
        :type: str
        """

        self._docker_id = docker_id

    @property
    def docker_name(self):
        """Gets the docker_name of this LabJob.  # noqa: E501


        :return: The docker_name of this LabJob.  # noqa: E501
        :rtype: str
        """
        return self._docker_name

    @docker_name.setter
    def docker_name(self, docker_name):
        """Sets the docker_name of this LabJob.


        :param docker_name: The docker_name of this LabJob.  # noqa: E501
        :type: str
        """

        self._docker_name = docker_name

    @property
    def docker_image(self):
        """Gets the docker_image of this LabJob.  # noqa: E501


        :return: The docker_image of this LabJob.  # noqa: E501
        :rtype: str
        """
        return self._docker_image

    @docker_image.setter
    def docker_image(self, docker_image):
        """Sets the docker_image of this LabJob.


        :param docker_image: The docker_image of this LabJob.  # noqa: E501
        :type: str
        """

        self._docker_image = docker_image

    @property
    def admin_link(self):
        """Gets the admin_link of this LabJob.  # noqa: E501


        :return: The admin_link of this LabJob.  # noqa: E501
        :rtype: str
        """
        return self._admin_link

    @admin_link.setter
    def admin_link(self, admin_link):
        """Sets the admin_link of this LabJob.


        :param admin_link: The admin_link of this LabJob.  # noqa: E501
        :type: str
        """

        self._admin_link = admin_link

    @property
    def started_at(self):
        """Gets the started_at of this LabJob.  # noqa: E501


        :return: The started_at of this LabJob.  # noqa: E501
        :rtype: int
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this LabJob.


        :param started_at: The started_at of this LabJob.  # noqa: E501
        :type: int
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this LabJob.  # noqa: E501


        :return: The status of this LabJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LabJob.


        :param status: The status of this LabJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def feature_type(self):
        """Gets the feature_type of this LabJob.  # noqa: E501


        :return: The feature_type of this LabJob.  # noqa: E501
        :rtype: str
        """
        return self._feature_type

    @feature_type.setter
    def feature_type(self, feature_type):
        """Sets the feature_type of this LabJob.


        :param feature_type: The feature_type of this LabJob.  # noqa: E501
        :type: str
        """

        self._feature_type = feature_type

    @property
    def configuration(self):
        """Gets the configuration of this LabJob.  # noqa: E501


        :return: The configuration of this LabJob.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this LabJob.


        :param configuration: The configuration of this LabJob.  # noqa: E501
        :type: dict(str, str)
        """

        self._configuration = configuration

    @property
    def labels(self):
        """Gets the labels of this LabJob.  # noqa: E501


        :return: The labels of this LabJob.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this LabJob.


        :param labels: The labels of this LabJob.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def finished_at(self):
        """Gets the finished_at of this LabJob.  # noqa: E501


        :return: The finished_at of this LabJob.  # noqa: E501
        :rtype: int
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this LabJob.


        :param finished_at: The finished_at of this LabJob.  # noqa: E501
        :type: int
        """

        self._finished_at = finished_at

    @property
    def exit_code(self):
        """Gets the exit_code of this LabJob.  # noqa: E501


        :return: The exit_code of this LabJob.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this LabJob.


        :param exit_code: The exit_code of this LabJob.  # noqa: E501
        :type: int
        """

        self._exit_code = exit_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LabJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
