# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExperimentResources(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input': 'list[str]',
        'artifacts': 'list[str]',
        'output': 'list[str]',
        'experiment_dir': 'str',
        'experiment_backup': 'str',
        'source_code': 'str',
        'source_script': 'str',
        'tensorboard_logs': 'str',
        'stdout': 'str'
    }

    attribute_map = {
        'input': 'input',
        'artifacts': 'artifacts',
        'output': 'output',
        'experiment_dir': 'experimentDir',
        'experiment_backup': 'experimentBackup',
        'source_code': 'sourceCode',
        'source_script': 'sourceScript',
        'tensorboard_logs': 'tensorboardLogs',
        'stdout': 'stdout'
    }

    def __init__(self, input=None, artifacts=None, output=None, experiment_dir=None, experiment_backup=None, source_code=None, source_script=None, tensorboard_logs=None, stdout=None):  # noqa: E501
        """ExperimentResources - a model defined in Swagger"""  # noqa: E501

        self._input = None
        self._artifacts = None
        self._output = None
        self._experiment_dir = None
        self._experiment_backup = None
        self._source_code = None
        self._source_script = None
        self._tensorboard_logs = None
        self._stdout = None
        self.discriminator = None

        if input is not None:
            self.input = input
        if artifacts is not None:
            self.artifacts = artifacts
        if output is not None:
            self.output = output
        if experiment_dir is not None:
            self.experiment_dir = experiment_dir
        if experiment_backup is not None:
            self.experiment_backup = experiment_backup
        if source_code is not None:
            self.source_code = source_code
        if source_script is not None:
            self.source_script = source_script
        if tensorboard_logs is not None:
            self.tensorboard_logs = tensorboard_logs
        if stdout is not None:
            self.stdout = stdout

    @property
    def input(self):
        """Gets the input of this ExperimentResources.  # noqa: E501


        :return: The input of this ExperimentResources.  # noqa: E501
        :rtype: list[str]
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this ExperimentResources.


        :param input: The input of this ExperimentResources.  # noqa: E501
        :type: list[str]
        """

        self._input = input

    @property
    def artifacts(self):
        """Gets the artifacts of this ExperimentResources.  # noqa: E501


        :return: The artifacts of this ExperimentResources.  # noqa: E501
        :rtype: list[str]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this ExperimentResources.


        :param artifacts: The artifacts of this ExperimentResources.  # noqa: E501
        :type: list[str]
        """

        self._artifacts = artifacts

    @property
    def output(self):
        """Gets the output of this ExperimentResources.  # noqa: E501


        :return: The output of this ExperimentResources.  # noqa: E501
        :rtype: list[str]
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this ExperimentResources.


        :param output: The output of this ExperimentResources.  # noqa: E501
        :type: list[str]
        """

        self._output = output

    @property
    def experiment_dir(self):
        """Gets the experiment_dir of this ExperimentResources.  # noqa: E501


        :return: The experiment_dir of this ExperimentResources.  # noqa: E501
        :rtype: str
        """
        return self._experiment_dir

    @experiment_dir.setter
    def experiment_dir(self, experiment_dir):
        """Sets the experiment_dir of this ExperimentResources.


        :param experiment_dir: The experiment_dir of this ExperimentResources.  # noqa: E501
        :type: str
        """

        self._experiment_dir = experiment_dir

    @property
    def experiment_backup(self):
        """Gets the experiment_backup of this ExperimentResources.  # noqa: E501


        :return: The experiment_backup of this ExperimentResources.  # noqa: E501
        :rtype: str
        """
        return self._experiment_backup

    @experiment_backup.setter
    def experiment_backup(self, experiment_backup):
        """Sets the experiment_backup of this ExperimentResources.


        :param experiment_backup: The experiment_backup of this ExperimentResources.  # noqa: E501
        :type: str
        """

        self._experiment_backup = experiment_backup

    @property
    def source_code(self):
        """Gets the source_code of this ExperimentResources.  # noqa: E501


        :return: The source_code of this ExperimentResources.  # noqa: E501
        :rtype: str
        """
        return self._source_code

    @source_code.setter
    def source_code(self, source_code):
        """Sets the source_code of this ExperimentResources.


        :param source_code: The source_code of this ExperimentResources.  # noqa: E501
        :type: str
        """

        self._source_code = source_code

    @property
    def source_script(self):
        """Gets the source_script of this ExperimentResources.  # noqa: E501


        :return: The source_script of this ExperimentResources.  # noqa: E501
        :rtype: str
        """
        return self._source_script

    @source_script.setter
    def source_script(self, source_script):
        """Sets the source_script of this ExperimentResources.


        :param source_script: The source_script of this ExperimentResources.  # noqa: E501
        :type: str
        """

        self._source_script = source_script

    @property
    def tensorboard_logs(self):
        """Gets the tensorboard_logs of this ExperimentResources.  # noqa: E501


        :return: The tensorboard_logs of this ExperimentResources.  # noqa: E501
        :rtype: str
        """
        return self._tensorboard_logs

    @tensorboard_logs.setter
    def tensorboard_logs(self, tensorboard_logs):
        """Sets the tensorboard_logs of this ExperimentResources.


        :param tensorboard_logs: The tensorboard_logs of this ExperimentResources.  # noqa: E501
        :type: str
        """

        self._tensorboard_logs = tensorboard_logs

    @property
    def stdout(self):
        """Gets the stdout of this ExperimentResources.  # noqa: E501


        :return: The stdout of this ExperimentResources.  # noqa: E501
        :rtype: str
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """Sets the stdout of this ExperimentResources.


        :param stdout: The stdout of this ExperimentResources.  # noqa: E501
        :type: str
        """

        self._stdout = stdout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExperimentResources, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperimentResources):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
