# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LabExperiment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'group_key': 'str',
        'name': 'str',
        'operator': 'str',
        'script_name': 'str',
        'script_type': 'str',
        'project': 'str',
        'started_at': 'int',
        'finished_at': 'int',
        'updated_at': 'int',
        'duration': 'int',
        'status': 'str',
        'command': 'str',
        'tags': 'list[str]',
        'note': 'str',
        'client_version': 'str',
        'git': 'GitInfo',
        'host': 'HostInfo',
        'dependencies': 'list[str]',
        'resources': 'ExperimentResources',
        'parameters': 'dict(str, object)',
        'metrics': 'dict(str, object)',
        'others': 'dict(str, object)',
        'result': 'str'
    }

    attribute_map = {
        'key': 'key',
        'group_key': 'groupKey',
        'name': 'name',
        'operator': 'operator',
        'script_name': 'scriptName',
        'script_type': 'scriptType',
        'project': 'project',
        'started_at': 'startedAt',
        'finished_at': 'finishedAt',
        'updated_at': 'updatedAt',
        'duration': 'duration',
        'status': 'status',
        'command': 'command',
        'tags': 'tags',
        'note': 'note',
        'client_version': 'clientVersion',
        'git': 'git',
        'host': 'host',
        'dependencies': 'dependencies',
        'resources': 'resources',
        'parameters': 'parameters',
        'metrics': 'metrics',
        'others': 'others',
        'result': 'result'
    }

    def __init__(self, key=None, group_key=None, name=None, operator=None, script_name=None, script_type=None, project=None, started_at=None, finished_at=None, updated_at=None, duration=None, status=None, command=None, tags=None, note=None, client_version=None, git=None, host=None, dependencies=None, resources=None, parameters=None, metrics=None, others=None, result=None):  # noqa: E501
        """LabExperiment - a model defined in Swagger"""  # noqa: E501

        self._key = None
        self._group_key = None
        self._name = None
        self._operator = None
        self._script_name = None
        self._script_type = None
        self._project = None
        self._started_at = None
        self._finished_at = None
        self._updated_at = None
        self._duration = None
        self._status = None
        self._command = None
        self._tags = None
        self._note = None
        self._client_version = None
        self._git = None
        self._host = None
        self._dependencies = None
        self._resources = None
        self._parameters = None
        self._metrics = None
        self._others = None
        self._result = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if group_key is not None:
            self.group_key = group_key
        if name is not None:
            self.name = name
        if operator is not None:
            self.operator = operator
        if script_name is not None:
            self.script_name = script_name
        if script_type is not None:
            self.script_type = script_type
        if project is not None:
            self.project = project
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        if updated_at is not None:
            self.updated_at = updated_at
        if duration is not None:
            self.duration = duration
        if status is not None:
            self.status = status
        if command is not None:
            self.command = command
        if tags is not None:
            self.tags = tags
        if note is not None:
            self.note = note
        if client_version is not None:
            self.client_version = client_version
        if git is not None:
            self.git = git
        if host is not None:
            self.host = host
        if dependencies is not None:
            self.dependencies = dependencies
        if resources is not None:
            self.resources = resources
        if parameters is not None:
            self.parameters = parameters
        if metrics is not None:
            self.metrics = metrics
        if others is not None:
            self.others = others
        if result is not None:
            self.result = result

    @property
    def key(self):
        """Gets the key of this LabExperiment.  # noqa: E501


        :return: The key of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this LabExperiment.


        :param key: The key of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def group_key(self):
        """Gets the group_key of this LabExperiment.  # noqa: E501


        :return: The group_key of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._group_key

    @group_key.setter
    def group_key(self, group_key):
        """Sets the group_key of this LabExperiment.


        :param group_key: The group_key of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._group_key = group_key

    @property
    def name(self):
        """Gets the name of this LabExperiment.  # noqa: E501


        :return: The name of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LabExperiment.


        :param name: The name of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operator(self):
        """Gets the operator of this LabExperiment.  # noqa: E501


        :return: The operator of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this LabExperiment.


        :param operator: The operator of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def script_name(self):
        """Gets the script_name of this LabExperiment.  # noqa: E501


        :return: The script_name of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._script_name

    @script_name.setter
    def script_name(self, script_name):
        """Sets the script_name of this LabExperiment.


        :param script_name: The script_name of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._script_name = script_name

    @property
    def script_type(self):
        """Gets the script_type of this LabExperiment.  # noqa: E501


        :return: The script_type of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._script_type

    @script_type.setter
    def script_type(self, script_type):
        """Sets the script_type of this LabExperiment.


        :param script_type: The script_type of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._script_type = script_type

    @property
    def project(self):
        """Gets the project of this LabExperiment.  # noqa: E501


        :return: The project of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this LabExperiment.


        :param project: The project of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def started_at(self):
        """Gets the started_at of this LabExperiment.  # noqa: E501


        :return: The started_at of this LabExperiment.  # noqa: E501
        :rtype: int
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this LabExperiment.


        :param started_at: The started_at of this LabExperiment.  # noqa: E501
        :type: int
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this LabExperiment.  # noqa: E501


        :return: The finished_at of this LabExperiment.  # noqa: E501
        :rtype: int
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this LabExperiment.


        :param finished_at: The finished_at of this LabExperiment.  # noqa: E501
        :type: int
        """

        self._finished_at = finished_at

    @property
    def updated_at(self):
        """Gets the updated_at of this LabExperiment.  # noqa: E501


        :return: The updated_at of this LabExperiment.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LabExperiment.


        :param updated_at: The updated_at of this LabExperiment.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def duration(self):
        """Gets the duration of this LabExperiment.  # noqa: E501


        :return: The duration of this LabExperiment.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this LabExperiment.


        :param duration: The duration of this LabExperiment.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def status(self):
        """Gets the status of this LabExperiment.  # noqa: E501


        :return: The status of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LabExperiment.


        :param status: The status of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def command(self):
        """Gets the command of this LabExperiment.  # noqa: E501


        :return: The command of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this LabExperiment.


        :param command: The command of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def tags(self):
        """Gets the tags of this LabExperiment.  # noqa: E501


        :return: The tags of this LabExperiment.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LabExperiment.


        :param tags: The tags of this LabExperiment.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def note(self):
        """Gets the note of this LabExperiment.  # noqa: E501


        :return: The note of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this LabExperiment.


        :param note: The note of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def client_version(self):
        """Gets the client_version of this LabExperiment.  # noqa: E501


        :return: The client_version of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._client_version

    @client_version.setter
    def client_version(self, client_version):
        """Sets the client_version of this LabExperiment.


        :param client_version: The client_version of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._client_version = client_version

    @property
    def git(self):
        """Gets the git of this LabExperiment.  # noqa: E501


        :return: The git of this LabExperiment.  # noqa: E501
        :rtype: GitInfo
        """
        return self._git

    @git.setter
    def git(self, git):
        """Sets the git of this LabExperiment.


        :param git: The git of this LabExperiment.  # noqa: E501
        :type: GitInfo
        """

        self._git = git

    @property
    def host(self):
        """Gets the host of this LabExperiment.  # noqa: E501


        :return: The host of this LabExperiment.  # noqa: E501
        :rtype: HostInfo
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this LabExperiment.


        :param host: The host of this LabExperiment.  # noqa: E501
        :type: HostInfo
        """

        self._host = host

    @property
    def dependencies(self):
        """Gets the dependencies of this LabExperiment.  # noqa: E501


        :return: The dependencies of this LabExperiment.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this LabExperiment.


        :param dependencies: The dependencies of this LabExperiment.  # noqa: E501
        :type: list[str]
        """

        self._dependencies = dependencies

    @property
    def resources(self):
        """Gets the resources of this LabExperiment.  # noqa: E501


        :return: The resources of this LabExperiment.  # noqa: E501
        :rtype: ExperimentResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this LabExperiment.


        :param resources: The resources of this LabExperiment.  # noqa: E501
        :type: ExperimentResources
        """

        self._resources = resources

    @property
    def parameters(self):
        """Gets the parameters of this LabExperiment.  # noqa: E501


        :return: The parameters of this LabExperiment.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this LabExperiment.


        :param parameters: The parameters of this LabExperiment.  # noqa: E501
        :type: dict(str, object)
        """

        self._parameters = parameters

    @property
    def metrics(self):
        """Gets the metrics of this LabExperiment.  # noqa: E501


        :return: The metrics of this LabExperiment.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this LabExperiment.


        :param metrics: The metrics of this LabExperiment.  # noqa: E501
        :type: dict(str, object)
        """

        self._metrics = metrics

    @property
    def others(self):
        """Gets the others of this LabExperiment.  # noqa: E501


        :return: The others of this LabExperiment.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._others

    @others.setter
    def others(self, others):
        """Sets the others of this LabExperiment.


        :param others: The others of this LabExperiment.  # noqa: E501
        :type: dict(str, object)
        """

        self._others = others

    @property
    def result(self):
        """Gets the result of this LabExperiment.  # noqa: E501


        :return: The result of this LabExperiment.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this LabExperiment.


        :param result: The result of this LabExperiment.  # noqa: E501
        :type: str
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LabExperiment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabExperiment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
