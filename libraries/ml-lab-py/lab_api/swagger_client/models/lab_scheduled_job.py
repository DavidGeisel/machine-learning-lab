# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LabScheduledJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'job_name': 'str',
        'docker_image': 'str',
        'configuration': 'dict(str, str)',
        'schedule': 'str',
        'added_at': 'int',
        'last_execution': 'int'
    }

    attribute_map = {
        'id': 'id',
        'job_name': 'jobName',
        'docker_image': 'dockerImage',
        'configuration': 'configuration',
        'schedule': 'schedule',
        'added_at': 'addedAt',
        'last_execution': 'lastExecution'
    }

    def __init__(self, id=None, job_name=None, docker_image=None, configuration=None, schedule=None, added_at=None, last_execution=None):  # noqa: E501
        """LabScheduledJob - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._job_name = None
        self._docker_image = None
        self._configuration = None
        self._schedule = None
        self._added_at = None
        self._last_execution = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if job_name is not None:
            self.job_name = job_name
        if docker_image is not None:
            self.docker_image = docker_image
        if configuration is not None:
            self.configuration = configuration
        if schedule is not None:
            self.schedule = schedule
        if added_at is not None:
            self.added_at = added_at
        if last_execution is not None:
            self.last_execution = last_execution

    @property
    def id(self):
        """Gets the id of this LabScheduledJob.  # noqa: E501


        :return: The id of this LabScheduledJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LabScheduledJob.


        :param id: The id of this LabScheduledJob.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def job_name(self):
        """Gets the job_name of this LabScheduledJob.  # noqa: E501


        :return: The job_name of this LabScheduledJob.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this LabScheduledJob.


        :param job_name: The job_name of this LabScheduledJob.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def docker_image(self):
        """Gets the docker_image of this LabScheduledJob.  # noqa: E501


        :return: The docker_image of this LabScheduledJob.  # noqa: E501
        :rtype: str
        """
        return self._docker_image

    @docker_image.setter
    def docker_image(self, docker_image):
        """Sets the docker_image of this LabScheduledJob.


        :param docker_image: The docker_image of this LabScheduledJob.  # noqa: E501
        :type: str
        """

        self._docker_image = docker_image

    @property
    def configuration(self):
        """Gets the configuration of this LabScheduledJob.  # noqa: E501


        :return: The configuration of this LabScheduledJob.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this LabScheduledJob.


        :param configuration: The configuration of this LabScheduledJob.  # noqa: E501
        :type: dict(str, str)
        """

        self._configuration = configuration

    @property
    def schedule(self):
        """Gets the schedule of this LabScheduledJob.  # noqa: E501


        :return: The schedule of this LabScheduledJob.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this LabScheduledJob.


        :param schedule: The schedule of this LabScheduledJob.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    @property
    def added_at(self):
        """Gets the added_at of this LabScheduledJob.  # noqa: E501


        :return: The added_at of this LabScheduledJob.  # noqa: E501
        :rtype: int
        """
        return self._added_at

    @added_at.setter
    def added_at(self, added_at):
        """Sets the added_at of this LabScheduledJob.


        :param added_at: The added_at of this LabScheduledJob.  # noqa: E501
        :type: int
        """

        self._added_at = added_at

    @property
    def last_execution(self):
        """Gets the last_execution of this LabScheduledJob.  # noqa: E501


        :return: The last_execution of this LabScheduledJob.  # noqa: E501
        :rtype: int
        """
        return self._last_execution

    @last_execution.setter
    def last_execution(self, last_execution):
        """Sets the last_execution of this LabScheduledJob.


        :param last_execution: The last_execution of this LabScheduledJob.  # noqa: E501
        :type: int
        """

        self._last_execution = last_execution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LabScheduledJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabScheduledJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
