# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ValueListFormatMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stats': 'dict(str, object)',
        'item_count': 'int',
        'limit': 'int',
        'status': 'int',
        'query': 'str',
        'message': 'str',
        'time': 'int'
    }

    attribute_map = {
        'stats': 'stats',
        'item_count': 'itemCount',
        'limit': 'limit',
        'status': 'status',
        'query': 'query',
        'message': 'message',
        'time': 'time'
    }

    def __init__(self, stats=None, item_count=None, limit=None, status=None, query=None, message=None, time=None):  # noqa: E501
        """ValueListFormatMetadata - a model defined in Swagger"""  # noqa: E501

        self._stats = None
        self._item_count = None
        self._limit = None
        self._status = None
        self._query = None
        self._message = None
        self._time = None
        self.discriminator = None

        if stats is not None:
            self.stats = stats
        if item_count is not None:
            self.item_count = item_count
        if limit is not None:
            self.limit = limit
        if status is not None:
            self.status = status
        if query is not None:
            self.query = query
        if message is not None:
            self.message = message
        if time is not None:
            self.time = time

    @property
    def stats(self):
        """Gets the stats of this ValueListFormatMetadata.  # noqa: E501


        :return: The stats of this ValueListFormatMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this ValueListFormatMetadata.


        :param stats: The stats of this ValueListFormatMetadata.  # noqa: E501
        :type: dict(str, object)
        """

        self._stats = stats

    @property
    def item_count(self):
        """Gets the item_count of this ValueListFormatMetadata.  # noqa: E501


        :return: The item_count of this ValueListFormatMetadata.  # noqa: E501
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this ValueListFormatMetadata.


        :param item_count: The item_count of this ValueListFormatMetadata.  # noqa: E501
        :type: int
        """

        self._item_count = item_count

    @property
    def limit(self):
        """Gets the limit of this ValueListFormatMetadata.  # noqa: E501


        :return: The limit of this ValueListFormatMetadata.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ValueListFormatMetadata.


        :param limit: The limit of this ValueListFormatMetadata.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def status(self):
        """Gets the status of this ValueListFormatMetadata.  # noqa: E501


        :return: The status of this ValueListFormatMetadata.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ValueListFormatMetadata.


        :param status: The status of this ValueListFormatMetadata.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def query(self):
        """Gets the query of this ValueListFormatMetadata.  # noqa: E501


        :return: The query of this ValueListFormatMetadata.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ValueListFormatMetadata.


        :param query: The query of this ValueListFormatMetadata.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def message(self):
        """Gets the message of this ValueListFormatMetadata.  # noqa: E501


        :return: The message of this ValueListFormatMetadata.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ValueListFormatMetadata.


        :param message: The message of this ValueListFormatMetadata.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def time(self):
        """Gets the time of this ValueListFormatMetadata.  # noqa: E501


        :return: The time of this ValueListFormatMetadata.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ValueListFormatMetadata.


        :param time: The time of this ValueListFormatMetadata.  # noqa: E501
        :type: int
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValueListFormatMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValueListFormatMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
