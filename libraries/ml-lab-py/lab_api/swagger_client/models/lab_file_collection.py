# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LabFileCollection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lab_files': 'list[LabFile]',
        'file_count': 'int',
        'total_size': 'int',
        'last_modified': 'int',
        'aggregated_versions': 'bool'
    }

    attribute_map = {
        'lab_files': 'labFiles',
        'file_count': 'fileCount',
        'total_size': 'totalSize',
        'last_modified': 'lastModified',
        'aggregated_versions': 'aggregatedVersions'
    }

    def __init__(self, lab_files=None, file_count=None, total_size=None, last_modified=None, aggregated_versions=None):  # noqa: E501
        """LabFileCollection - a model defined in Swagger"""  # noqa: E501

        self._lab_files = None
        self._file_count = None
        self._total_size = None
        self._last_modified = None
        self._aggregated_versions = None
        self.discriminator = None

        if lab_files is not None:
            self.lab_files = lab_files
        if file_count is not None:
            self.file_count = file_count
        if total_size is not None:
            self.total_size = total_size
        if last_modified is not None:
            self.last_modified = last_modified
        if aggregated_versions is not None:
            self.aggregated_versions = aggregated_versions

    @property
    def lab_files(self):
        """Gets the lab_files of this LabFileCollection.  # noqa: E501


        :return: The lab_files of this LabFileCollection.  # noqa: E501
        :rtype: list[LabFile]
        """
        return self._lab_files

    @lab_files.setter
    def lab_files(self, lab_files):
        """Sets the lab_files of this LabFileCollection.


        :param lab_files: The lab_files of this LabFileCollection.  # noqa: E501
        :type: list[LabFile]
        """

        self._lab_files = lab_files

    @property
    def file_count(self):
        """Gets the file_count of this LabFileCollection.  # noqa: E501


        :return: The file_count of this LabFileCollection.  # noqa: E501
        :rtype: int
        """
        return self._file_count

    @file_count.setter
    def file_count(self, file_count):
        """Sets the file_count of this LabFileCollection.


        :param file_count: The file_count of this LabFileCollection.  # noqa: E501
        :type: int
        """

        self._file_count = file_count

    @property
    def total_size(self):
        """Gets the total_size of this LabFileCollection.  # noqa: E501


        :return: The total_size of this LabFileCollection.  # noqa: E501
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this LabFileCollection.


        :param total_size: The total_size of this LabFileCollection.  # noqa: E501
        :type: int
        """

        self._total_size = total_size

    @property
    def last_modified(self):
        """Gets the last_modified of this LabFileCollection.  # noqa: E501


        :return: The last_modified of this LabFileCollection.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this LabFileCollection.


        :param last_modified: The last_modified of this LabFileCollection.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def aggregated_versions(self):
        """Gets the aggregated_versions of this LabFileCollection.  # noqa: E501


        :return: The aggregated_versions of this LabFileCollection.  # noqa: E501
        :rtype: bool
        """
        return self._aggregated_versions

    @aggregated_versions.setter
    def aggregated_versions(self, aggregated_versions):
        """Sets the aggregated_versions of this LabFileCollection.


        :param aggregated_versions: The aggregated_versions of this LabFileCollection.  # noqa: E501
        :type: bool
        """

        self._aggregated_versions = aggregated_versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LabFileCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabFileCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
