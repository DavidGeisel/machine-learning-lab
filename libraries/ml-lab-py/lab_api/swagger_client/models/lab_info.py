# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LabInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'runtime': 'str',
        'namespace': 'str',
        'projects_count': 'int',
        'terms_of_service': 'str',
        'core_service_info': 'dict(str, str)',
        'healthy': 'bool'
    }

    attribute_map = {
        'version': 'version',
        'runtime': 'runtime',
        'namespace': 'namespace',
        'projects_count': 'projectsCount',
        'terms_of_service': 'termsOfService',
        'core_service_info': 'coreServiceInfo',
        'healthy': 'healthy'
    }

    def __init__(self, version=None, runtime=None, namespace=None, projects_count=None, terms_of_service=None, core_service_info=None, healthy=None):  # noqa: E501
        """LabInfo - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._runtime = None
        self._namespace = None
        self._projects_count = None
        self._terms_of_service = None
        self._core_service_info = None
        self._healthy = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if runtime is not None:
            self.runtime = runtime
        if namespace is not None:
            self.namespace = namespace
        if projects_count is not None:
            self.projects_count = projects_count
        if terms_of_service is not None:
            self.terms_of_service = terms_of_service
        if core_service_info is not None:
            self.core_service_info = core_service_info
        if healthy is not None:
            self.healthy = healthy

    @property
    def version(self):
        """Gets the version of this LabInfo.  # noqa: E501


        :return: The version of this LabInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LabInfo.


        :param version: The version of this LabInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def runtime(self):
        """Gets the runtime of this LabInfo.  # noqa: E501


        :return: The runtime of this LabInfo.  # noqa: E501
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this LabInfo.


        :param runtime: The runtime of this LabInfo.  # noqa: E501
        :type: str
        """

        self._runtime = runtime

    @property
    def namespace(self):
        """Gets the namespace of this LabInfo.  # noqa: E501


        :return: The namespace of this LabInfo.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this LabInfo.


        :param namespace: The namespace of this LabInfo.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def projects_count(self):
        """Gets the projects_count of this LabInfo.  # noqa: E501


        :return: The projects_count of this LabInfo.  # noqa: E501
        :rtype: int
        """
        return self._projects_count

    @projects_count.setter
    def projects_count(self, projects_count):
        """Sets the projects_count of this LabInfo.


        :param projects_count: The projects_count of this LabInfo.  # noqa: E501
        :type: int
        """

        self._projects_count = projects_count

    @property
    def terms_of_service(self):
        """Gets the terms_of_service of this LabInfo.  # noqa: E501


        :return: The terms_of_service of this LabInfo.  # noqa: E501
        :rtype: str
        """
        return self._terms_of_service

    @terms_of_service.setter
    def terms_of_service(self, terms_of_service):
        """Sets the terms_of_service of this LabInfo.


        :param terms_of_service: The terms_of_service of this LabInfo.  # noqa: E501
        :type: str
        """

        self._terms_of_service = terms_of_service

    @property
    def core_service_info(self):
        """Gets the core_service_info of this LabInfo.  # noqa: E501


        :return: The core_service_info of this LabInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._core_service_info

    @core_service_info.setter
    def core_service_info(self, core_service_info):
        """Sets the core_service_info of this LabInfo.


        :param core_service_info: The core_service_info of this LabInfo.  # noqa: E501
        :type: dict(str, str)
        """

        self._core_service_info = core_service_info

    @property
    def healthy(self):
        """Gets the healthy of this LabInfo.  # noqa: E501


        :return: The healthy of this LabInfo.  # noqa: E501
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """Sets the healthy of this LabInfo.


        :param healthy: The healthy of this LabInfo.  # noqa: E501
        :type: bool
        """

        self._healthy = healthy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LabInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
