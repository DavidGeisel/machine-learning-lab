# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LabFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'key': 'str',
        'modified_by': 'str',
        'modified_at': 'int',
        'size': 'int',
        'hash': 'str',
        'version': 'int',
        'content_type': 'str',
        'data_type': 'str',
        'description': 'str',
        'metadata': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'key': 'key',
        'modified_by': 'modifiedBy',
        'modified_at': 'modifiedAt',
        'size': 'size',
        'hash': 'hash',
        'version': 'version',
        'content_type': 'contentType',
        'data_type': 'dataType',
        'description': 'description',
        'metadata': 'metadata'
    }

    def __init__(self, name=None, key=None, modified_by=None, modified_at=None, size=None, hash=None, version=None, content_type=None, data_type=None, description=None, metadata=None):  # noqa: E501
        """LabFile - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._key = None
        self._modified_by = None
        self._modified_at = None
        self._size = None
        self._hash = None
        self._version = None
        self._content_type = None
        self._data_type = None
        self._description = None
        self._metadata = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if key is not None:
            self.key = key
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_at is not None:
            self.modified_at = modified_at
        if size is not None:
            self.size = size
        if hash is not None:
            self.hash = hash
        if version is not None:
            self.version = version
        if content_type is not None:
            self.content_type = content_type
        if data_type is not None:
            self.data_type = data_type
        if description is not None:
            self.description = description
        if metadata is not None:
            self.metadata = metadata

    @property
    def name(self):
        """Gets the name of this LabFile.  # noqa: E501


        :return: The name of this LabFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LabFile.


        :param name: The name of this LabFile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def key(self):
        """Gets the key of this LabFile.  # noqa: E501


        :return: The key of this LabFile.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this LabFile.


        :param key: The key of this LabFile.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def modified_by(self):
        """Gets the modified_by of this LabFile.  # noqa: E501


        :return: The modified_by of this LabFile.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this LabFile.


        :param modified_by: The modified_by of this LabFile.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def modified_at(self):
        """Gets the modified_at of this LabFile.  # noqa: E501


        :return: The modified_at of this LabFile.  # noqa: E501
        :rtype: int
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this LabFile.


        :param modified_at: The modified_at of this LabFile.  # noqa: E501
        :type: int
        """

        self._modified_at = modified_at

    @property
    def size(self):
        """Gets the size of this LabFile.  # noqa: E501


        :return: The size of this LabFile.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LabFile.


        :param size: The size of this LabFile.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def hash(self):
        """Gets the hash of this LabFile.  # noqa: E501


        :return: The hash of this LabFile.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this LabFile.


        :param hash: The hash of this LabFile.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def version(self):
        """Gets the version of this LabFile.  # noqa: E501


        :return: The version of this LabFile.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LabFile.


        :param version: The version of this LabFile.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def content_type(self):
        """Gets the content_type of this LabFile.  # noqa: E501


        :return: The content_type of this LabFile.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this LabFile.


        :param content_type: The content_type of this LabFile.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def data_type(self):
        """Gets the data_type of this LabFile.  # noqa: E501


        :return: The data_type of this LabFile.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this LabFile.


        :param data_type: The data_type of this LabFile.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def description(self):
        """Gets the description of this LabFile.  # noqa: E501


        :return: The description of this LabFile.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LabFile.


        :param description: The description of this LabFile.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this LabFile.  # noqa: E501


        :return: The metadata of this LabFile.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this LabFile.


        :param metadata: The metadata of this LabFile.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LabFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
