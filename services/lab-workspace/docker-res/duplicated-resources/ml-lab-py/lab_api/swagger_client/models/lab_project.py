# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LabProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'creator': 'str',
        'visibility': 'str',
        'created_at': 'int',
        'is_available': 'bool',
        'statistics': 'LabProjectsStatistics',
        'services': 'list[LabService]',
        'experiments': 'list[LabExperiment]',
        'datasets': 'LabFileCollection',
        'models': 'LabFileCollection',
        'members': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'creator': 'creator',
        'visibility': 'visibility',
        'created_at': 'createdAt',
        'is_available': 'isAvailable',
        'statistics': 'statistics',
        'services': 'services',
        'experiments': 'experiments',
        'datasets': 'datasets',
        'models': 'models',
        'members': 'members'
    }

    def __init__(self, id=None, name=None, description=None, creator=None, visibility=None, created_at=None, is_available=None, statistics=None, services=None, experiments=None, datasets=None, models=None, members=None):  # noqa: E501
        """LabProject - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._creator = None
        self._visibility = None
        self._created_at = None
        self._is_available = None
        self._statistics = None
        self._services = None
        self._experiments = None
        self._datasets = None
        self._models = None
        self._members = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if creator is not None:
            self.creator = creator
        if visibility is not None:
            self.visibility = visibility
        if created_at is not None:
            self.created_at = created_at
        if is_available is not None:
            self.is_available = is_available
        if statistics is not None:
            self.statistics = statistics
        if services is not None:
            self.services = services
        if experiments is not None:
            self.experiments = experiments
        if datasets is not None:
            self.datasets = datasets
        if models is not None:
            self.models = models
        if members is not None:
            self.members = members

    @property
    def id(self):
        """Gets the id of this LabProject.  # noqa: E501


        :return: The id of this LabProject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LabProject.


        :param id: The id of this LabProject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LabProject.  # noqa: E501


        :return: The name of this LabProject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LabProject.


        :param name: The name of this LabProject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this LabProject.  # noqa: E501


        :return: The description of this LabProject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LabProject.


        :param description: The description of this LabProject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def creator(self):
        """Gets the creator of this LabProject.  # noqa: E501


        :return: The creator of this LabProject.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this LabProject.


        :param creator: The creator of this LabProject.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def visibility(self):
        """Gets the visibility of this LabProject.  # noqa: E501


        :return: The visibility of this LabProject.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this LabProject.


        :param visibility: The visibility of this LabProject.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    @property
    def created_at(self):
        """Gets the created_at of this LabProject.  # noqa: E501


        :return: The created_at of this LabProject.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LabProject.


        :param created_at: The created_at of this LabProject.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def is_available(self):
        """Gets the is_available of this LabProject.  # noqa: E501


        :return: The is_available of this LabProject.  # noqa: E501
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this LabProject.


        :param is_available: The is_available of this LabProject.  # noqa: E501
        :type: bool
        """

        self._is_available = is_available

    @property
    def statistics(self):
        """Gets the statistics of this LabProject.  # noqa: E501


        :return: The statistics of this LabProject.  # noqa: E501
        :rtype: LabProjectsStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this LabProject.


        :param statistics: The statistics of this LabProject.  # noqa: E501
        :type: LabProjectsStatistics
        """

        self._statistics = statistics

    @property
    def services(self):
        """Gets the services of this LabProject.  # noqa: E501


        :return: The services of this LabProject.  # noqa: E501
        :rtype: list[LabService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this LabProject.


        :param services: The services of this LabProject.  # noqa: E501
        :type: list[LabService]
        """

        self._services = services

    @property
    def experiments(self):
        """Gets the experiments of this LabProject.  # noqa: E501


        :return: The experiments of this LabProject.  # noqa: E501
        :rtype: list[LabExperiment]
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this LabProject.


        :param experiments: The experiments of this LabProject.  # noqa: E501
        :type: list[LabExperiment]
        """

        self._experiments = experiments

    @property
    def datasets(self):
        """Gets the datasets of this LabProject.  # noqa: E501


        :return: The datasets of this LabProject.  # noqa: E501
        :rtype: LabFileCollection
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this LabProject.


        :param datasets: The datasets of this LabProject.  # noqa: E501
        :type: LabFileCollection
        """

        self._datasets = datasets

    @property
    def models(self):
        """Gets the models of this LabProject.  # noqa: E501


        :return: The models of this LabProject.  # noqa: E501
        :rtype: LabFileCollection
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this LabProject.


        :param models: The models of this LabProject.  # noqa: E501
        :type: LabFileCollection
        """

        self._models = models

    @property
    def members(self):
        """Gets the members of this LabProject.  # noqa: E501


        :return: The members of this LabProject.  # noqa: E501
        :rtype: list[str]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this LabProject.


        :param members: The members of this LabProject.  # noqa: E501
        :type: list[str]
        """

        self._members = members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LabProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
