# coding: utf-8

"""
    ML Lab Service

    Functionality to create and manage Lab projects, services, datasets, models, and experiments.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HostInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname': 'str',
        'os': 'str',
        'cpu': 'str',
        'cpu_cores': 'str',
        'memory_size': 'str',
        'python_version': 'str',
        'python_compiler': 'str',
        'python_impl': 'str',
        'workspace_version': 'str',
        'gpus': 'list[str]'
    }

    attribute_map = {
        'hostname': 'hostname',
        'os': 'os',
        'cpu': 'cpu',
        'cpu_cores': 'cpuCores',
        'memory_size': 'memorySize',
        'python_version': 'pythonVersion',
        'python_compiler': 'pythonCompiler',
        'python_impl': 'pythonImpl',
        'workspace_version': 'workspaceVersion',
        'gpus': 'gpus'
    }

    def __init__(self, hostname=None, os=None, cpu=None, cpu_cores=None, memory_size=None, python_version=None, python_compiler=None, python_impl=None, workspace_version=None, gpus=None):  # noqa: E501
        """HostInfo - a model defined in Swagger"""  # noqa: E501

        self._hostname = None
        self._os = None
        self._cpu = None
        self._cpu_cores = None
        self._memory_size = None
        self._python_version = None
        self._python_compiler = None
        self._python_impl = None
        self._workspace_version = None
        self._gpus = None
        self.discriminator = None

        if hostname is not None:
            self.hostname = hostname
        if os is not None:
            self.os = os
        if cpu is not None:
            self.cpu = cpu
        if cpu_cores is not None:
            self.cpu_cores = cpu_cores
        if memory_size is not None:
            self.memory_size = memory_size
        if python_version is not None:
            self.python_version = python_version
        if python_compiler is not None:
            self.python_compiler = python_compiler
        if python_impl is not None:
            self.python_impl = python_impl
        if workspace_version is not None:
            self.workspace_version = workspace_version
        if gpus is not None:
            self.gpus = gpus

    @property
    def hostname(self):
        """Gets the hostname of this HostInfo.  # noqa: E501


        :return: The hostname of this HostInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this HostInfo.


        :param hostname: The hostname of this HostInfo.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def os(self):
        """Gets the os of this HostInfo.  # noqa: E501


        :return: The os of this HostInfo.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this HostInfo.


        :param os: The os of this HostInfo.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def cpu(self):
        """Gets the cpu of this HostInfo.  # noqa: E501


        :return: The cpu of this HostInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this HostInfo.


        :param cpu: The cpu of this HostInfo.  # noqa: E501
        :type: str
        """

        self._cpu = cpu

    @property
    def cpu_cores(self):
        """Gets the cpu_cores of this HostInfo.  # noqa: E501


        :return: The cpu_cores of this HostInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu_cores

    @cpu_cores.setter
    def cpu_cores(self, cpu_cores):
        """Sets the cpu_cores of this HostInfo.


        :param cpu_cores: The cpu_cores of this HostInfo.  # noqa: E501
        :type: str
        """

        self._cpu_cores = cpu_cores

    @property
    def memory_size(self):
        """Gets the memory_size of this HostInfo.  # noqa: E501


        :return: The memory_size of this HostInfo.  # noqa: E501
        :rtype: str
        """
        return self._memory_size

    @memory_size.setter
    def memory_size(self, memory_size):
        """Sets the memory_size of this HostInfo.


        :param memory_size: The memory_size of this HostInfo.  # noqa: E501
        :type: str
        """

        self._memory_size = memory_size

    @property
    def python_version(self):
        """Gets the python_version of this HostInfo.  # noqa: E501


        :return: The python_version of this HostInfo.  # noqa: E501
        :rtype: str
        """
        return self._python_version

    @python_version.setter
    def python_version(self, python_version):
        """Sets the python_version of this HostInfo.


        :param python_version: The python_version of this HostInfo.  # noqa: E501
        :type: str
        """

        self._python_version = python_version

    @property
    def python_compiler(self):
        """Gets the python_compiler of this HostInfo.  # noqa: E501


        :return: The python_compiler of this HostInfo.  # noqa: E501
        :rtype: str
        """
        return self._python_compiler

    @python_compiler.setter
    def python_compiler(self, python_compiler):
        """Sets the python_compiler of this HostInfo.


        :param python_compiler: The python_compiler of this HostInfo.  # noqa: E501
        :type: str
        """

        self._python_compiler = python_compiler

    @property
    def python_impl(self):
        """Gets the python_impl of this HostInfo.  # noqa: E501


        :return: The python_impl of this HostInfo.  # noqa: E501
        :rtype: str
        """
        return self._python_impl

    @python_impl.setter
    def python_impl(self, python_impl):
        """Sets the python_impl of this HostInfo.


        :param python_impl: The python_impl of this HostInfo.  # noqa: E501
        :type: str
        """

        self._python_impl = python_impl

    @property
    def workspace_version(self):
        """Gets the workspace_version of this HostInfo.  # noqa: E501


        :return: The workspace_version of this HostInfo.  # noqa: E501
        :rtype: str
        """
        return self._workspace_version

    @workspace_version.setter
    def workspace_version(self, workspace_version):
        """Sets the workspace_version of this HostInfo.


        :param workspace_version: The workspace_version of this HostInfo.  # noqa: E501
        :type: str
        """

        self._workspace_version = workspace_version

    @property
    def gpus(self):
        """Gets the gpus of this HostInfo.  # noqa: E501


        :return: The gpus of this HostInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._gpus

    @gpus.setter
    def gpus(self, gpus):
        """Sets the gpus of this HostInfo.


        :param gpus: The gpus of this HostInfo.  # noqa: E501
        :type: list[str]
        """

        self._gpus = gpus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
