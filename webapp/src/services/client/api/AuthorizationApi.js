/*
 * ML Lab Service
 * Functionality to create and manage Lab projects, services, datasets, models, and experiments.
 *
 * OpenAPI spec version: 2.2.0-SNAPSHOT
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LabUserResponse', 'model/ListOfLabUsersResponse', 'model/StatusMessageFormat', 'model/StringResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LabUserResponse'), require('../model/ListOfLabUsersResponse'), require('../model/StatusMessageFormat'), require('../model/StringResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.MlLabService) {
      root.MlLabService = {};
    }
    root.MlLabService.AuthorizationApi = factory(root.MlLabService.ApiClient, root.MlLabService.LabUserResponse, root.MlLabService.ListOfLabUsersResponse, root.MlLabService.StatusMessageFormat, root.MlLabService.StringResponse);
  }
}(this, function(ApiClient, LabUserResponse, ListOfLabUsersResponse, StatusMessageFormat, StringResponse) {
  'use strict';

  /**
   * Authorization service.
   * @module api/AuthorizationApi
   * @version 2.2.0-SNAPSHOT
   */

  /**
   * Constructs a new AuthorizationApi. 
   * @alias module:api/AuthorizationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addUserToProject operation.
     * @callback module:api/AuthorizationApi~addUserToProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to a project. Return new token.
     * 
     * @param {String} user User Name
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~addUserToProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.addUserToProject = function(user, project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling addUserToProject");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling addUserToProject");
      }


      var pathParams = {
        'user': user,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/auth/users/{user}/projects/{project}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createApiToken operation.
     * @callback module:api/AuthorizationApi~createApiTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a long-term API token for given user.
     * 
     * @param {String} user User Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~createApiTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.createApiToken = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createApiToken");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/auth/users/{user}/token', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/AuthorizationApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user profile.
     * 
     * @param {String} user Id/username of the profile.
     * @param {String} password Password of the profile.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.admin Create the user with Admin permissions.
     * @param {String} opts.jwtSecret JWT Secret. If passed and matches the server's secret, the account will be created with admin credentials.
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabUserResponse}
     */
    this.createUser = function(user, password, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createUser");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling createUser");
      }


      var pathParams = {
      };
      var queryParams = {
        'user': user,
        'password': password,
        'admin': opts['admin'],
        'jwtSecret': opts['jwtSecret'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LabUserResponse;

      return this.apiClient.callApi(
        '/api/auth/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateUsers operation.
     * @callback module:api/AuthorizationApi~deactivateUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusMessageFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate a list of users. This will overwrite all deactivated users (admin only).
     * 
     * @param {Array.<module:model/String>} body List of users to set deactivated.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~deactivateUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusMessageFormat}
     */
    this.deactivateUsers = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deactivateUsers");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StatusMessageFormat;

      return this.apiClient.callApi(
        '/api/auth/users/deactivate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/AuthorizationApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusMessageFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user (admin only).
     * 
     * @param {String} user User Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusMessageFormat}
     */
    this.deleteUser = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteUser");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StatusMessageFormat;

      return this.apiClient.callApi(
        '/api/auth/users/{user}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMe operation.
     * @callback module:api/AuthorizationApi~getMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user profile of the current user.
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~getMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabUserResponse}
     */
    this.getMe = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LabUserResponse;

      return this.apiClient.callApi(
        '/api/auth/users/me', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/AuthorizationApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the profile a user has access to.
     * 
     * @param {String} user User Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabUserResponse}
     */
    this.getUser = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getUser");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LabUserResponse;

      return this.apiClient.callApi(
        '/api/auth/users/{user}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/AuthorizationApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfLabUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all profiles stored in the database (admin only).
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfLabUsersResponse}
     */
    this.getUsers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOfLabUsersResponse;

      return this.apiClient.callApi(
        '/api/auth/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUser operation.
     * @callback module:api/AuthorizationApi~loginUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login with basic auth and get short-term application token (JWT).
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~loginUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.loginUser = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/auth/login', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutUser operation.
     * @callback module:api/AuthorizationApi~logoutUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log the user out by setting the auth cookie to a time in the past
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~logoutUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.logoutUser = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/auth/logout', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshToken operation.
     * @callback module:api/AuthorizationApi~refreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a new short-term application token (JWT).
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~refreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.refreshToken = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/auth/refresh', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserFromProject operation.
     * @callback module:api/AuthorizationApi~removeUserFromProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from a project. Return new token.
     * 
     * @param {String} user User Name
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~removeUserFromProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.removeUserFromProject = function(user, project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling removeUserFromProject");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling removeUserFromProject");
      }


      var pathParams = {
        'user': user,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/auth/users/{user}/projects/{project}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePermissions operation.
     * @callback module:api/AuthorizationApi~updatePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update permissions of a user (admin only). Return new token.
     * 
     * @param {String} user User Name
     * @param {Array.<module:model/String>} body Permission List
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deactivateToken If true, the user is forced to re-login.
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~updatePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.updatePermissions = function(user, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling updatePermissions");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePermissions");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'deactivateToken': opts['deactivateToken'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/auth/users/{user}/permissions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserPassword operation.
     * @callback module:api/AuthorizationApi~updateUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user password. Return new token.
     * 
     * @param {String} user User Name
     * @param {String} password New Password
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AuthorizationApi~updateUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.updateUserPassword = function(user, password, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling updateUserPassword");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling updateUserPassword");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'password': password,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/auth/users/{user}/password', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
