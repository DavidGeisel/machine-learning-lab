/*
 * ML Lab Service
 * Functionality to create and manage Lab projects, services, datasets, models, and experiments.
 *
 * OpenAPI spec version: 2.2.0-SNAPSHOT
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LabExperiment', 'model/LabFileResponse', 'model/LabJobResponse', 'model/LabProjectConfig', 'model/LabProjectResponse', 'model/LabServiceResponse', 'model/ListOfLabExperimentsResponse', 'model/ListOfLabFilesResponse', 'model/ListOfLabJobsResponse', 'model/ListOfLabProjectsResponse', 'model/ListOfLabScheduledJobsResponse', 'model/ListOfLabServicesResponse', 'model/StatusMessageFormat', 'model/StringResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LabExperiment'), require('../model/LabFileResponse'), require('../model/LabJobResponse'), require('../model/LabProjectConfig'), require('../model/LabProjectResponse'), require('../model/LabServiceResponse'), require('../model/ListOfLabExperimentsResponse'), require('../model/ListOfLabFilesResponse'), require('../model/ListOfLabJobsResponse'), require('../model/ListOfLabProjectsResponse'), require('../model/ListOfLabScheduledJobsResponse'), require('../model/ListOfLabServicesResponse'), require('../model/StatusMessageFormat'), require('../model/StringResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.MlLabService) {
      root.MlLabService = {};
    }
    root.MlLabService.ProjectsApi = factory(root.MlLabService.ApiClient, root.MlLabService.LabExperiment, root.MlLabService.LabFileResponse, root.MlLabService.LabJobResponse, root.MlLabService.LabProjectConfig, root.MlLabService.LabProjectResponse, root.MlLabService.LabServiceResponse, root.MlLabService.ListOfLabExperimentsResponse, root.MlLabService.ListOfLabFilesResponse, root.MlLabService.ListOfLabJobsResponse, root.MlLabService.ListOfLabProjectsResponse, root.MlLabService.ListOfLabScheduledJobsResponse, root.MlLabService.ListOfLabServicesResponse, root.MlLabService.StatusMessageFormat, root.MlLabService.StringResponse);
  }
}(this, function(ApiClient, LabExperiment, LabFileResponse, LabJobResponse, LabProjectConfig, LabProjectResponse, LabServiceResponse, ListOfLabExperimentsResponse, ListOfLabFilesResponse, ListOfLabJobsResponse, ListOfLabProjectsResponse, ListOfLabScheduledJobsResponse, ListOfLabServicesResponse, StatusMessageFormat, StringResponse) {
  'use strict';

  /**
   * Projects service.
   * @module api/ProjectsApi
   * @version 2.2.0-SNAPSHOT
   */

  /**
   * Constructs a new ProjectsApi. 
   * @alias module:api/ProjectsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ProjectsApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabProjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project.
     * 
     * @param {module:model/LabProjectConfig} body Project Configuration
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabProjectResponse}
     */
    this.createProject = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProject");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LabProjectResponse;

      return this.apiClient.callApi(
        '/api/projects', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectToken operation.
     * @callback module:api/ProjectsApi~createProjectTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project token for the specified project.
     * 
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~createProjectTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.createProjectToken = function(project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createProjectToken");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/token', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperiment operation.
     * @callback module:api/ProjectsApi~deleteExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusMessageFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an experiment from a specified project.
     * 
     * @param {String} project Project Name
     * @param {String} experiment Experiment ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~deleteExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusMessageFormat}
     */
    this.deleteExperiment = function(project, experiment, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteExperiment");
      }

      // verify the required parameter 'experiment' is set
      if (experiment === undefined || experiment === null) {
        throw new Error("Missing the required parameter 'experiment' when calling deleteExperiment");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
        'experiment': experiment,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StatusMessageFormat;

      return this.apiClient.callApi(
        '/api/projects/{project}/experiments', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFile operation.
     * @callback module:api/ProjectsApi~deleteFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusMessageFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a file from a specified project.
     * 
     * @param {String} project Project Name
     * @param {String} fileKey File Key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.keepLatestVersions Keep the n-latest Versions
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~deleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusMessageFormat}
     */
    this.deleteFile = function(project, fileKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteFile");
      }

      // verify the required parameter 'fileKey' is set
      if (fileKey === undefined || fileKey === null) {
        throw new Error("Missing the required parameter 'fileKey' when calling deleteFile");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
        'fileKey': fileKey,
        'keepLatestVersions': opts['keepLatestVersions'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StatusMessageFormat;

      return this.apiClient.callApi(
        '/api/projects/{project}/files', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJob operation.
     * @callback module:api/ProjectsApi~deleteJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusMessageFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a job from a project.
     * 
     * @param {String} project Project Name
     * @param {String} job Job Name or Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusMessageFormat}
     */
    this.deleteJob = function(project, job, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteJob");
      }

      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling deleteJob");
      }


      var pathParams = {
        'project': project,
        'job': job
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StatusMessageFormat;

      return this.apiClient.callApi(
        '/api/projects/{project}/jobs/{job}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectsApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusMessageFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project and all its associated networks, services & data.
     * 
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusMessageFormat}
     */
    this.deleteProject = function(project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteProject");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StatusMessageFormat;

      return this.apiClient.callApi(
        '/api/projects/{project}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScheduledJob operation.
     * @callback module:api/ProjectsApi~deleteScheduledJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusMessageFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a scheduled job.
     * 
     * @param {String} project Project Name
     * @param {String} job Job ID
     * @param {module:api/ProjectsApi~deleteScheduledJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusMessageFormat}
     */
    this.deleteScheduledJob = function(project, job, callback) {
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteScheduledJob");
      }

      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling deleteScheduledJob");
      }


      var pathParams = {
        'project': project,
        'job': job
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StatusMessageFormat;

      return this.apiClient.callApi(
        '/api/projects/{project}/jobs/scheduled/{job}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteService operation.
     * @callback module:api/ProjectsApi~deleteServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusMessageFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific project service by name or type.
     * 
     * @param {String} project Project Name
     * @param {String} service Service Name or Type
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusMessageFormat}
     */
    this.deleteService = function(project, service, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteService");
      }

      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling deleteService");
      }


      var pathParams = {
        'project': project,
        'service': service
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StatusMessageFormat;

      return this.apiClient.callApi(
        '/api/projects/{project}/services/{service}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deployJob operation.
     * @callback module:api/ProjectsApi~deployJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a job for a specified project based on a provided image.
     * 
     * @param {String} project Project Name
     * @param {String} image Image Name
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body Job Configuration
     * @param {String} opts.schedule Cron Schedule in UNIX format. If specified, the job is executed repeatedly according to the cron definition. A job cannot run more often than once a minute.
     * @param {String} opts.name Job Name
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~deployJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabJobResponse}
     */
    this.deployJob = function(project, image, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deployJob");
      }

      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling deployJob");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
        'image': image,
        'schedule': opts['schedule'],
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LabJobResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/jobs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deployModel operation.
     * @callback module:api/ProjectsApi~deployModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a model as a service for a specified project.
     * 
     * @param {String} project Project Name
     * @param {String} fileKey Model Key
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body JSON config containing the environment variables to overwrite the default
     * @param {String} opts.name Service Name
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~deployModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabServiceResponse}
     */
    this.deployModel = function(project, fileKey, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deployModel");
      }

      // verify the required parameter 'fileKey' is set
      if (fileKey === undefined || fileKey === null) {
        throw new Error("Missing the required parameter 'fileKey' when calling deployModel");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
        'fileKey': fileKey,
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LabServiceResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/files/models/deploy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deployService operation.
     * @callback module:api/ProjectsApi~deployServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a service for a specified project based on a provided image.
     * 
     * @param {String} project Project Name
     * @param {String} image Image Name
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body Service Configuration
     * @param {String} opts.name Service Name
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~deployServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabServiceResponse}
     */
    this.deployService = function(project, image, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deployService");
      }

      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling deployService");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
        'image': image,
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LabServiceResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/services', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFile operation.
     * @callback module:api/ProjectsApi~downloadFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file from remote storage of selected project.
     * 
     * @param {String} project Project Name
     * @param {String} fileKey File Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~downloadFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.downloadFile = function(project, fileKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling downloadFile");
      }

      // verify the required parameter 'fileKey' is set
      if (fileKey === undefined || fileKey === null) {
        throw new Error("Missing the required parameter 'fileKey' when calling downloadFile");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
        'fileKey': fileKey,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/octet-stream'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/projects/{project}/files/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperiments operation.
     * @callback module:api/ProjectsApi~getExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfLabExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all experiments of a project with details.
     * 
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfLabExperimentsResponse}
     */
    this.getExperiments = function(project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getExperiments");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOfLabExperimentsResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/experiments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileInfo operation.
     * @callback module:api/ProjectsApi~getFileInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get info about the specified file.
     * 
     * @param {String} project Project Name
     * @param {String} fileKey File Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getFileInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabFileResponse}
     */
    this.getFileInfo = function(project, fileKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getFileInfo");
      }

      // verify the required parameter 'fileKey' is set
      if (fileKey === undefined || fileKey === null) {
        throw new Error("Missing the required parameter 'fileKey' when calling getFileInfo");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
        'fileKey': fileKey,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LabFileResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/files/info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFiles operation.
     * @callback module:api/ProjectsApi~getFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfLabFilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all files of a project with details and general statistics filtered by data type and/or prefix.
     * 
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.dataType Data Type
     * @param {String} opts.prefix File Key Prefix. If data type is provided, will prefix will be applied for datatype, otherwise on full remote storage.
     * @param {Boolean} opts.aggregateVersions Aggregate Versions
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfLabFilesResponse}
     */
    this.getFiles = function(project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getFiles");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
        'dataType': opts['dataType'],
        'prefix': opts['prefix'],
        'aggregateVersions': opts['aggregateVersions'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOfLabFilesResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJob operation.
     * @callback module:api/ProjectsApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project job by name or type.
     * 
     * @param {String} project Project Name
     * @param {String} job Job Name or Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabJobResponse}
     */
    this.getJob = function(project, job, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getJob");
      }

      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling getJob");
      }


      var pathParams = {
        'project': project,
        'job': job
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LabJobResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/jobs/{job}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobLogs operation.
     * @callback module:api/ProjectsApi~getJobLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the logs for a job.
     * 
     * @param {String} project Project Name
     * @param {String} job Job Name or Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getJobLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.getJobLogs = function(project, job, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getJobLogs");
      }

      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling getJobLogs");
      }


      var pathParams = {
        'project': project,
        'job': job
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/jobs/{job}/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobs operation.
     * @callback module:api/ProjectsApi~getJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfLabJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all jobs of a project with details and general statistics.
     * 
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfLabJobsResponse}
     */
    this.getJobs = function(project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getJobs");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOfLabJobsResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/jobs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ProjectsApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabProjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details for the specified project.
     * 
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.expand Expand Information (files, services, experiments...)
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabProjectResponse}
     */
    this.getProject = function(project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getProject");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LabProjectResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/ProjectsApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfLabProjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available projects with details.
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfLabProjectsResponse}
     */
    this.getProjects = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOfLabProjectsResponse;

      return this.apiClient.callApi(
        '/api/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getScheduledJobs operation.
     * @callback module:api/ProjectsApi~getScheduledJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfLabScheduledJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all scheduled jobs of a project.
     * 
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getScheduledJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfLabScheduledJobsResponse}
     */
    this.getScheduledJobs = function(project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getScheduledJobs");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOfLabScheduledJobsResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/jobs/scheduled', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getService operation.
     * @callback module:api/ProjectsApi~getServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project service by name or type.
     * 
     * @param {String} project Project Name
     * @param {String} service Service Name or Type
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabServiceResponse}
     */
    this.getService = function(project, service, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getService");
      }

      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling getService");
      }


      var pathParams = {
        'project': project,
        'service': service
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LabServiceResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/services/{service}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceLogs operation.
     * @callback module:api/ProjectsApi~getServiceLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the logs for a service.
     * 
     * @param {String} project Project Name
     * @param {String} service Service Name or Type
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getServiceLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.getServiceLogs = function(project, service, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getServiceLogs");
      }

      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling getServiceLogs");
      }


      var pathParams = {
        'project': project,
        'service': service
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/services/{service}/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServices operation.
     * @callback module:api/ProjectsApi~getServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfLabServicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all services of a project with details and general statistics.
     * 
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~getServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfLabServicesResponse}
     */
    this.getServices = function(project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getServices");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOfLabServicesResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/services', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the isProjectAvailable operation.
     * @callback module:api/ProjectsApi~isProjectAvailableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusMessageFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks if a project name is available for project creation .
     * 
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~isProjectAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusMessageFormat}
     */
    this.isProjectAvailable = function(project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling isProjectAvailable");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StatusMessageFormat;

      return this.apiClient.callApi(
        '/api/projects/{project}/available', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the syncExperiment operation.
     * @callback module:api/ProjectsApi~syncExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync an experiment to the experiments DB of a project.
     * 
     * @param {module:model/LabExperiment} body Experiment
     * @param {String} project Project Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~syncExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.syncExperiment = function(body, project, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling syncExperiment");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling syncExperiment");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/experiments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/ProjectsApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file to remote storage of selected project and returns key.
     * 
     * @param {String} project Project Name
     * @param {module:model/String} dataType Data Type of File.
     * @param {File} file 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileName File Name. If not provided, the filename from file metadata will be used.
     * @param {Boolean} opts.versioning Versioning activated (default to true)
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/ProjectsApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringResponse}
     */
    this.uploadFile = function(project, dataType, file, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling uploadFile");
      }

      // verify the required parameter 'dataType' is set
      if (dataType === undefined || dataType === null) {
        throw new Error("Missing the required parameter 'dataType' when calling uploadFile");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadFile");
      }


      var pathParams = {
        'project': project
      };
      var queryParams = {
        'dataType': dataType,
        'fileName': opts['fileName'],
        'versioning': opts['versioning'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
        'file': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = StringResponse;

      return this.apiClient.callApi(
        '/api/projects/{project}/files/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
