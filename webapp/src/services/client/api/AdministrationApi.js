/*
 * ML Lab Service
 * Functionality to create and manage Lab projects, services, datasets, models, and experiments.
 *
 * OpenAPI spec version: 2.2.0-SNAPSHOT
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LabInfoResponse', 'model/LabServiceResponse', 'model/LabStatisticsResponse', 'model/ListOfLabEventsResponse', 'model/ListOfLabUsers', 'model/ListOfStringsResponse', 'model/StatusMessageFormat'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LabInfoResponse'), require('../model/LabServiceResponse'), require('../model/LabStatisticsResponse'), require('../model/ListOfLabEventsResponse'), require('../model/ListOfLabUsers'), require('../model/ListOfStringsResponse'), require('../model/StatusMessageFormat'));
  } else {
    // Browser globals (root is window)
    if (!root.MlLabService) {
      root.MlLabService = {};
    }
    root.MlLabService.AdministrationApi = factory(root.MlLabService.ApiClient, root.MlLabService.LabInfoResponse, root.MlLabService.LabServiceResponse, root.MlLabService.LabStatisticsResponse, root.MlLabService.ListOfLabEventsResponse, root.MlLabService.ListOfLabUsers, root.MlLabService.ListOfStringsResponse, root.MlLabService.StatusMessageFormat);
  }
}(this, function(ApiClient, LabInfoResponse, LabServiceResponse, LabStatisticsResponse, ListOfLabEventsResponse, ListOfLabUsers, ListOfStringsResponse, StatusMessageFormat) {
  'use strict';

  /**
   * Administration service.
   * @module api/AdministrationApi
   * @version 2.2.0-SNAPSHOT
   */

  /**
   * Constructs a new AdministrationApi. 
   * @alias module:api/AdministrationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the checkWorkspace operation.
     * @callback module:api/AdministrationApi~checkWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusMessageFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks whether a workspace container for the passed id already exists. If not, a new one is created & started.
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AdministrationApi~checkWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusMessageFormat}
     */
    this.checkWorkspace = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StatusMessageFormat;

      return this.apiClient.callApi(
        '/api/admin/workspace/check', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvents operation.
     * @callback module:api/AdministrationApi~getEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfLabEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns events filtered by a specified event type (admin-only).
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.event Event Type. If not provided, all events will be returned.
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AdministrationApi~getEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfLabEventsResponse}
     */
    this.getEvents = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'event': opts['event'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOfLabEventsResponse;

      return this.apiClient.callApi(
        '/api/admin/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLabInfo operation.
     * @callback module:api/AdministrationApi~getLabInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about this Lab instance.
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AdministrationApi~getLabInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabInfoResponse}
     */
    this.getLabInfo = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LabInfoResponse;

      return this.apiClient.callApi(
        '/api/admin/info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatistics operation.
     * @callback module:api/AdministrationApi~getStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabStatisticsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns statistics about this Lab instance (admin-only).
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AdministrationApi~getStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabStatisticsResponse}
     */
    this.getStatistics = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LabStatisticsResponse;

      return this.apiClient.callApi(
        '/api/admin/statistics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetAllWorkspaces operation.
     * @callback module:api/AdministrationApi~resetAllWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusMessageFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets all workspaces. Use with caution (admin-only).
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AdministrationApi~resetAllWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusMessageFormat}
     */
    this.resetAllWorkspaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StatusMessageFormat;

      return this.apiClient.callApi(
        '/api/admin/workspace/reset-all', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetWorkspace operation.
     * @callback module:api/AdministrationApi~resetWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets a workspace. Removes the container (keeps all persisted data) and starts a new one.
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id 
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AdministrationApi~resetWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabServiceResponse}
     */
    this.resetWorkspace = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LabServiceResponse;

      return this.apiClient.callApi(
        '/api/admin/workspace/reset', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shutdownDiskExceedingContainers operation.
     * @callback module:api/AdministrationApi~shutdownDiskExceedingContainersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfStringsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all workspaces that exceed the disk storage limit (docker-local mode only).
     * 
     * @param {Boolean} dryrun If 'true', it will only return candidates for removal.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AdministrationApi~shutdownDiskExceedingContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfStringsResponse}
     */
    this.shutdownDiskExceedingContainers = function(dryrun, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dryrun' is set
      if (dryrun === undefined || dryrun === null) {
        throw new Error("Missing the required parameter 'dryrun' when calling shutdownDiskExceedingContainers");
      }


      var pathParams = {
      };
      var queryParams = {
        'dryrun': dryrun,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = ListOfStringsResponse;

      return this.apiClient.callApi(
        '/api/admin/workspace/shutdown-disk-exceeding', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the shutdownUnusedWorkspaces operation.
     * @callback module:api/AdministrationApi~shutdownUnusedWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfLabUsers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shutdown all unused workspaces - 15 days without activity (admin-only).
     * 
     * @param {Boolean} dryrun If 'true', it will only return candidates for shutdown.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.threshold Number of inactive days to consider workspace unused. (default to 14)
     * @param {Array.<module:model/String>} opts.body IDs to include as inactive users.
     * @param {String} opts.authorization Authorization Token
     * @param {module:api/AdministrationApi~shutdownUnusedWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfLabUsers}
     */
    this.shutdownUnusedWorkspaces = function(dryrun, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'dryrun' is set
      if (dryrun === undefined || dryrun === null) {
        throw new Error("Missing the required parameter 'dryrun' when calling shutdownUnusedWorkspaces");
      }


      var pathParams = {
      };
      var queryParams = {
        'dryrun': dryrun,
        'threshold': opts['threshold'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ListOfLabUsers;

      return this.apiClient.callApi(
        '/api/admin/workspace/shutdown-unused', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
